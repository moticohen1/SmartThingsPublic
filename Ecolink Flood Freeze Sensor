/**
 *  Copyright 2017 Big Pine Systems
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at: 
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See 
the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Ecolink Flood Freeze Sensor
 *
 *  Author: Keith Ballantyne
 *  Date: 2017-11-28
 */

metadata {
definition (name: "EcoLink Flood/Freeze Sensor", namespace: "bigpinesystems", author: "Keith Ballantyne", ocfDeviceType: "x.com.st.d.sensor.water") {
	capability "Water Sensor"
	capability "Sensor"
	capability "Battery"
    capability "Temperature Measurement"

	fingerprint mfr: "014A", prod: "0005", model: "0010"
}

simulator {
    status "dry": "command: 3006, payload: 00"
    status "wet": "command: 3006, payload: FF"
    status "freezing": "command: 3007, payload: FF"
    status "normal": "command: 3007, payload: 00"
	status "dry notification": "command: 7105, payload: 04"
	status "wet notification": "command: 7105, payload: 02"
	status "wake up": "command: 8407, payload: "
}

tiles(scale:2) {
	multiAttributeTile(name:"water", type: "generic", width: 3, height: 4){
		tileAttribute("device.water", key: "PRIMARY_CONTROL") {
			attributeState("dry", icon:"st.alarm.water.dry", backgroundColor:"#ffffff")
			attributeState("wet", icon:"st.alarm.water.wet", backgroundColor:"#00A0DC")
		}
	}
    multiAttributeTile(name:"temperature", type: "generic", width: 3, height: 4){
    	tileAttribute ("device.temperature", key: "PRIMARY_CONTROL") {
        	attributeState("freezing", icon: "st.Weather.weather7", backgroundColor:"#0000ff")
        	attributeState("normal", icon: "st.Weather.weather2", backgroundColor:"#ffffff")
    	}
    }
	valueTile("battery", "device.battery", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
		state "battery", label:'${currentValue}% battery', unit:""
	}

	main (["water", "temperature"])
	details(["water", "temperature", "battery"])
}
}

private getCommandClassVersions() {
[0x20: 1, 0x30: 2, 0x31: 5, 0x80: 1, 0x84: 1, 0x71: 3, 0x9C: 1]
}

def parse(String description) {
    def result = null
    def cmd = zwave.parse(description, getCommandClassVersions())
    if (cmd) {
            result = zwaveEvent(cmd)
            log.debug "Parsed ${cmd} to ${result.inspect()}"
    } else {
            log.debug "Non-parsed event: ${description}"
    }
    result
}


def zwaveEvent(physicalgraph.zwave.commands.sensorbinaryv2.SensorBinaryReport cmd) {
    def result
    switch (cmd.sensorType) {
            case 6:
                    result = createEvent(name:"water",
                            value: cmd.sensorValue ? "wet" : "dry")
                    break
            case 7:
                    result = createEvent(name:"temperature",
                            value: cmd.sensorValue ? "freezing" : "normal")
                    break
    }
    result
}



def zwaveEvent(physicalgraph.zwave.commands.notificationv3.NotificationReport cmd)
{
def result = []
if (cmd.notificationType == 0x05) {
	switch (cmd.event) {
	case 0x04:
		result << createEvent(descriptionText: "Water alarm cleared", isStateChange: true)
		break
	case 0x02:
		result << createEvent(descriptionText: "Water alarm ACTIVE", isStateChange: true)
		break
	}
} else if (cmd.notificationType == 0x07) {
	switch(cmd.event) {
    	case 0x03: 
			result << createEvent(descriptionText: "$device.displayName covering was removed", isStateChange: true)
			result << response([
				zwave.wakeUpV1.wakeUpIntervalSet(seconds:4*3600, nodeid:zwaveHubNodeId).format(),
				zwave.batteryV1.batteryGet().format()])
            break;
        case 0x00:
			result << createEvent(descriptionText: "$device.displayName covering was replaced", isStateChange: true)
			result << response([
				zwave.wakeUpV1.wakeUpIntervalSet(seconds:4*3600, nodeid:zwaveHubNodeId).format(),
				zwave.batteryV1.batteryGet().format()])
            break;
    }
} else if (cmd.notificationType == 0x08) {
	switch (cmd.event) {
    	case 0x0A:
			result << createEvent(descriptionText: "$device.displayName replace battery soon", isStateChange: true)
			result << response([
				zwave.wakeUpV1.wakeUpIntervalSet(seconds:4*3600, nodeid:zwaveHubNodeId).format(),
				zwave.batteryV1.batteryGet().format()])
            break;
        case 0x0B:
			result << createEvent(descriptionText: "$device.displayName replace battery NOW", isStateChange: true)
			result << response([
				zwave.wakeUpV1.wakeUpIntervalSet(seconds:4*3600, nodeid:zwaveHubNodeId).format(),
				zwave.batteryV1.batteryGet().format()])
            break;
	}
} else if (cmd.notificationType) {
	def text = "Notification $cmd.notificationType: event ${([cmd.event] + cmd.eventParameter).join(", ")}"
	result << createEvent(name: "notification$cmd.notificationType", value: "$cmd.event", descriptionText: text, displayed: false)
} else {
	def value = cmd.v1AlarmLevel == 255 ? "active" : cmd.v1AlarmLevel ?: "inactive"
	result << createEvent(name: "alarm $cmd.v1AlarmType", value: value, displayed: false)
}
result
}

def zwaveEvent(physicalgraph.zwave.commands.wakeupv2.WakeUpNotification cmd)
{
    def result = [createEvent(descriptionText: "${device.displayName} woke up", isStateChange: false)]

    // Only ask for battery if we haven't had a BatteryReport in a while
    if (!state.lastbatt || (new Date().time) - state.lastbatt > 24*60*60*1000) {
            result << response(zwave.batteryV1.batteryGet())
            result << response("delay 1200")  // leave time for device to respond to batteryGet
    }
    result << response(zwave.wakeUpV1.wakeUpNoMoreInformation())
    result
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
    def map = [ name: "battery", unit: "%" ]
    if (cmd.batteryLevel == 0xFF) {  // Special value for low battery alert
            map.value = 1
            map.descriptionText = "${device.displayName} has a low battery"
            map.isStateChange = true
    } else {
            map.value = cmd.batteryLevel
    }
    // Store time of last battery update so we don't ask every wakeup, see WakeUpNotification handler
    state.lastbatt = new Date().time
    createEvent(map)
}


def zwaveEvent(physicalgraph.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport cmd) {
def result = []

def msr = String.format("%04X-%04X-%04X", cmd.manufacturerId, cmd.productTypeId, cmd.productId)
log.debug "msr: $msr"
updateDataValue("MSR", msr)

if (msr == "0086-0002-002D") {  // Aeon Water Sensor needs to have wakeup interval set
	result << response(zwave.wakeUpV1.wakeUpIntervalSet(seconds:4*3600, nodeid:zwaveHubNodeId))
}
result << createEvent(descriptionText: "$device.displayName MSR: $msr", isStateChange: false)
result
}
